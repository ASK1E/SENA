from flask import send_file
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.pdfgen import canvas
import io
from datetime import datetime

def header(canvas_obj, doc):
    canvas_obj.saveState()
    canvas_obj.setFont('Helvetica-Bold', 10)
    canvas_obj.setFillColor(colors.HexColor('#0f2027'))
    canvas_obj.rect(0, A4[1] - 0.5 * inch, A4[0], 0.5 * inch, fill=1)
    canvas_obj.setFillColor(colors.whitesmoke)
    canvas_obj.drawString(doc.leftMargin, A4[1] - 0.35 * inch, "Port Scan Report")
    canvas_obj.drawRightString(A4[0] - doc.rightMargin, A4[1] - 0.35 * inch, datetime.now().strftime('%Y-%m-%d %H:%M'))
    canvas_obj.restoreState()

def footer(canvas_obj, doc):
    canvas_obj.saveState()
    canvas_obj.setFont('Helvetica', 9)
    canvas_obj.setFillColor(colors.HexColor('#0f2027'))
    canvas_obj.rect(0, 0.3 * inch, A4[0], 0.3 * inch, fill=1)
    canvas_obj.setFillColor(colors.whitesmoke)
    canvas_obj.drawString(doc.leftMargin, 0.4 * inch, "Generated by Python Port Scanner")
    canvas_obj.drawRightString(A4[0] - doc.rightMargin, 0.4 * inch, f"Page {doc.page}")
    canvas_obj.restoreState()

def generate_pdf(scan_id, scan_data):
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=0.75*inch, leftMargin=0.75*inch, topMargin=1*inch, bottomMargin=0.8*inch)

    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle(name='Title', fontSize=18, alignment=1, spaceAfter=20))
    styles.add(ParagraphStyle(name='Heading', fontSize=14, spaceAfter=10, textColor=colors.HexColor('#2c5364')))
    styles.add(ParagraphStyle(name='Normal', fontSize=10))

    elements = []
    elements.append(Paragraph(f"Port Scan Report for {scan_data['target']}", styles['Title']))

    # Summary Table
    summary_data = [
        ["Target", scan_data['target']],
        ["Mode", scan_data['mode']],
        ["Port Range", scan_data['range']],
        ["Open Ports", ', '.join(map(str, scan_data['open_ports'])) or "None"]
    ]
    table = Table(summary_data, colWidths=[doc.width * 0.3, doc.width * 0.7])
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#0f2027')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#f0f0f0')),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.grey)
    ]))
    elements.append(table)

    doc.build(elements, onFirstPage=header, onLaterPages=header, canvasmaker=canvas.Canvas)
    buffer.seek(0)
    return send_file(buffer, as_attachment=True, download_name=f"scan_report_{scan_id}.pdf", mimetype='application/pdf')
